package view

import (
	"fmt"
	"github.com/webdevfuel/go-htmx-data-dashboard/data"
	"github.com/webdevfuel/go-htmx-data-dashboard/view/layout"
	"time"
)

templ Dashboard(metrics []data.Metric) {
	@layout.Base() {
		<script type="text/javascript" src="/static/chart.min.js"></script>
		<div class="px-6">
			<h1 class="text-2xl font-bold">Dashboard</h1>
			<div class="grid grid-cols-3 gap-4 mt-4">
				@Card("Total Users", "4289")
				@Card("Total Pending", "874")
				@Card("Total Blocked", "1289")
			</div>
			<div class="grid grid-cols-2 gap-4 mt-4">
				@Chart("1", "New Users", metricsDates(metrics), newUsersMetrics(metrics))
				@Chart("2", "New Activations", metricsDates(metrics), newActivationsMetrics(metrics))
			</div>
			<div class="grid grid-cols-2 gap-4 mt-4">
				@Feed("1", "New Users", metricsDates(metrics), newUsersMetrics(metrics))
				@Feed("2", "New Activations", metricsDates(metrics), newActivationsMetrics(metrics))
			</div>
		</div>
	}
}

templ Card(title, value string) {
	<div class="flex flex-col items-start justify-between border border-neutral-700 rounded-lg p-4 gap-2">
		<p class="text-lg font-medium">{ title }</p>
		<p class="text-2xl font-bold">{ value }</p>
	</div>
}

templ Chart(id, title string, labels, data any) {
	<div data-chart data-labels={ templ.JSONString(labels) } data-data={ templ.JSONString(data) } class="flex flex-col justify-between border border-neutral-700 rounded-lg p-4 gap-4" data-id={ fmt.Sprintf("chart-%s", id) }>
		<div class="flex items-center justify-between">
			<p class="text-lg font-medium">{ title }</p>
			<button hx-get={ fmt.Sprintf("/refresh/%s", id) } class="text-neutral-300 hover:text-white">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg>
			</button>
		</div>
		<div class="relative">
			<canvas class="!w-full !h-full" id={ fmt.Sprintf("chart-%s", id) }></canvas>
			<script type="text/javascript" src="/static/chart.js"></script>
		</div>
	</div>
}

func newUsersMetrics(metrics []data.Metric) []int {
	newUsers := make([]int, 0)
	for _, metric := range metrics {
		newUsers = append(newUsers, metric.NewUsers)
	}
	return newUsers
}

func newActivationsMetrics(metrics []data.Metric) []int {
	newActivations := make([]int, 0)
	for _, metric := range metrics {
		newActivations = append(newActivations, metric.NewActivations)
	}
	return newActivations
}

func metricsDates(metrics []data.Metric) []string {
	dates := make([]string, 0)
	for _, metric := range metrics {
		d, _ := time.Parse("2006-01-02", metric.MetricDate)
		dates = append(dates, d.Format("02 Jan"))
	}
	return dates
}
