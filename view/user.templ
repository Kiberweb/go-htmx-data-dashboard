package view

import (
	"fmt"
	"github.com/webdevfuel/go-htmx-data-dashboard/data"
	"github.com/webdevfuel/go-htmx-data-dashboard/pagination"
	"github.com/webdevfuel/go-htmx-data-dashboard/view/layout"
)

templ User(user data.User) {
	@layout.Base() {
		<div>{ user.Email }</div>
	}
}

templ Users() {
	@layout.Base() {
		<div class="px-6" id="users" hx-include=".attribute" hx-get="/users-table" hx-trigger="load, refetch" hx-target="#table">
			<div class="flex items-center justify-between">
				<h1 class="text-2xl font-bold">Users</h1>
				<div class="flex items-center space-x-2.5">
					<select name="filter" id="filter" class="attribute block w-[200px] p-2 text-sm border rounded-lg bg-neutral-800 border-neutral-700 placeholder-neutral-400 focus:ring-blue-500 focus:border-blue-500">
						<option value="">All Users</option>
						<option value="status = active">Active</option>
						<option value="status = blocked">Blocked</option>
						<option value="status = pending">Pending</option>
						<option value="status = archived">Archived</option>
					</select>
					<select name="sort" id="sort" class="attribute block w-[200px] p-2 text-sm border rounded-lg bg-neutral-800 border-neutral-700 placeholder-neutral-400 focus:ring-blue-500 focus:border-blue-500">
						<option value="name:asc">Sort by Name</option>
						<option value="email:asc">Sort by Email</option>
						<option value="status:asc">Sort by Status</option>
						<option value="name:desc">Sort by Name (Descending)</option>
						<option value="email:desc">Sort by Email (Descending)</option>
						<option value="status:desc">Sort by Status (Descending)</option>
					</select>
				</div>
			</div>
			<div id="table" class="[.htmx-request_&]:hidden mt-4"></div>
			<div id="spinner" class="hidden [.htmx-request_&]:block mt-4">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>
			</div>
		</div>
		<script type="text/javascript" src="/static/table.js"></script>
	}
}

templ UsersTable(users []data.User, prev, next *pagination.Page) {
	<div>
		<div class="border border-neutral-700 rounded-lg">
			<table class="table-auto w-full">
				<thead>
					<tr>
						<th class="text-left px-4 py-2 border-b border-neutral-700 bg-neutral-800 rounded-tl-md">Name</th>
						<th class="text-left px-4 py-2 border-b border-neutral-700 bg-neutral-800">Email</th>
						<th class="text-left px-4 py-2 border-b border-neutral-700 bg-neutral-800">Status</th>
						<th class="text-left px-4 py-2 border-b border-neutral-700 bg-neutral-800 rounded-tr-md"></th>
					</tr>
				</thead>
				<tbody>
					for _, user := range users {
						<tr class="group">
							<td class="text-left px-4 py-2 group-hover:bg-neutral-800">{ user.Name }</td>
							<td class="text-left px-4 py-2 group-hover:bg-neutral-800">{ user.Email }</td>
							<td class="text-left px-4 py-2 group-hover:bg-neutral-800">
								<span { statusAttributes(user.Status)... }>
									{ statusLabel(user.Status) }
								</span>
							</td>
							<td class="text-left px-4 py-2 group-hover:bg-neutral-800">
								<div class="flex justify-end items-center space-x-4">
									<a class="flex items-center font-medium text-neutral-300 hover:text-white" href={ templ.SafeURL(fmt.Sprintf("/users/%d", user.ID)) }>
										<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 mr-2"><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path><circle cx="12" cy="12" r="3"></circle></svg>
										View
									</a>
									<a class="flex items-center font-medium text-neutral-300 hover:text-white" href={ templ.SafeURL(fmt.Sprintf("/users/%d", user.ID)) }>
										<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 mr-2"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path></svg>
										Remove
									</a>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div id="pagination" class="flex items-center space-x-4 mt-4">
			@paginationItem(fmt.Sprintf("/users-table?page=%d", prev.Value), prev.Disabled) {
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 mr-2.5"><path d="M6 8L2 12L6 16"></path><path d="M2 12H22"></path></svg>
				Prev
			}
			@paginationItem(fmt.Sprintf("/users-table?page=%d", next.Value), next.Disabled) {
				Next
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 ml-2.5"><path d="M18 8L22 12L18 16"></path><path d="M2 12H22"></path></svg>
			}
		</div>
		<script type="text/javascript" src="/static/pagination.js"> </script>
	</div>
}

templ paginationItem(url string, disabled bool) {
	if disabled {
		<div class="flex items-center font-medium text-neutral-700 pointer-events-none">
			{ children... }
		</div>
	} else {
		<button class="flex items-center font-medium text-neutral-300 hover:text-white" type="button" hx-get={ url }>
			{ children... }
		</button>
	}
}

func statusAttributes(status string) templ.Attributes {
	attributes := make(templ.Attributes, 0)
	baseClass := "rounded-full px-2 py-0.5 text-sm"
	switch status {
	case "active":
		attributes["class"] = fmt.Sprintf("%s bg-blue-700/10 text-blue-700", baseClass)
	case "blocked":
		attributes["class"] = fmt.Sprintf("%s bg-red-700/10 text-red-700", baseClass)
	case "pending":
		attributes["class"] = fmt.Sprintf("%s bg-gray-700/10 text-gray-700", baseClass)
	case "archived":
		attributes["class"] = fmt.Sprintf("%s bg-slate-700/10 text-slate-700", baseClass)
	}
	return attributes
}

func statusLabel(status string) string {
	switch status {
	case "active":
		return "Active"
	case "blocked":
		return "Blocked"
	case "pending":
		return "Pending"
	case "archived":
		return "Archived"
	default:
		return ""
	}
}
